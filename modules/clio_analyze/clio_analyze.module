<?php

// A module to display the visualizations. The available visualizations are configurable.

// TODO:
// Per viz add: machine_name, label, status (enabled)
// Make the one with lowest weight default.
// Default visualizations exported, in install.
// Use schema instead of variables table.
// Make list of visualizations dynamic.
// Make table with visualizations, with options to add, edit, delete and disable a visualization.


function clio_analyze_visualizations() {
  return array('maps', 'graphs', 'stats', 'charts');
}


/**
 * Implements hook_menu().
 */
function clio_analyze_menu() {
  $items = array();
  $items['analyze'] = array(
    'title' => 'Analyze',
    'page callback' => 'clio_analyze_intro',
    'access arguments' => array('analyze datasets'),
    'expanded' => TRUE,
  );
  $items['admin/config/clio/analyze'] = array(
    'title'            => 'Analyze',
    'description'      => t('Configure Clio Infra visualization services'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('clio_analyze_config_form'),
    'access arguments' => array('administer clioinfra'),
  );
  $visualizations = clio_analyze_visualizations();
  $config = variable_get('clio_analyze_config', array());
  foreach ($visualizations as $viz) {
    $settings = $config[$viz];
    $type = variable_get('clio_analyze_default', '') == $viz ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK;
    $items['analyze/' . $viz] = array(
      'title'            => ucfirst($viz),
      'page callback'    => 'clio_analyze_view',
      'page arguments'   => array($viz),
      'access arguments' => array('analyze datasets'),
      'type'             => $type,
      'weight'           => isset($settings['weight']) ? $settings['weight'] : 0,
    );
  }
  return $items;
}


/**
 * Implements hook_permission().
 */
function clio_analyze_permission() {
  return array(
    'analyze datasets' => array(
      'title' => t('Analyze datasets'),
    ),
  );
}


/**
 * A page to display if no visualization is chosen.
 */
function clio_analyze_intro() {
  if ($default = variable_get('clio_analyze_default', '')) {
    drupal_goto('analyze/'. $default);
  }
  $content = t('Intro to analyzing datasets.');
  $output = array (
    'intro' => array(
      '#type' => 'markup',
      '#markup' => $content,
     )
  );
  return $output;
}


/**
 * Configuration form for API url's.
 */
function clio_analyze_config_form($form, &$form_state) {
  $visualizations = clio_analyze_visualizations();
  $form = array();
  
  $form['help'] = array(
    '#markup' => t("Default parameters for all API's are <em>hist</em> (on if type is historical), <em>handle</em> (datasetid), <em>ctrlist</em> (comma-separated list of country id's), <em>yearmin</em> and <em>yearmax</em>. Extra fixed parameters can be set per API."),
  );
  
  $form['clio_analyze_default'] = array(
    '#type'  => 'select',
    '#options' => drupal_map_assoc($visualizations),
    '#title' => t('Default visualization'),
    '#description' => t('The default visualization to show.'),
    '#default_value' => variable_get('clio_analyze_default', ''),
//    '#element_validate' => array('clio_validate_api'),
  );
  $form['clio_analyze_config'] = array(
    '#tree' => TRUE,
  );
  $config = variable_get('clio_analyze_config', array());
  foreach ($visualizations as $viz) {
    $settings = $config[$viz];
    $form['clio_analyze_config'][$viz] = array(
      '#type' => 'fieldset',
      '#title' => ucfirst($viz),
      '#tree' => TRUE,
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE,
    );
    $form['clio_analyze_config'][$viz]['api'] = array(
      '#type'  => 'textfield',
      '#title' => t('API'),
      '#description' => t('The url of the API providing the visualization.'),
      '#default_value' => isset($settings['api']) ? $settings['api'] : '',
      // TODO Validate function does not work for tree children:
      // Notice: Undefined index: clio_analyze_maps[api] in clio_validate_api() 
      // '#element_validate' => array('clio_validate_api'),
    );
    $form['clio_analyze_config'][$viz]['height'] = array(
      '#type'  => 'textfield',
      '#title' => t('Height'),
      '#size' => 4,
      '#maxlength' => 4,
      '#field_suffix' => 'px',
      '#description' => t('The height of the iframe.'),
      '#default_value' => isset($settings['height']) ? $settings['height'] : '500',
    );
    $form['clio_analyze_config'][$viz]['weight'] = array(
      '#type'  => 'weight',
      '#title' => t('Weight'),
      '#delta' => 5,
      '#description' => t('Optional. In the list of tabs, the lighter items will be positioned on the left, the heavier items on the right. The first item will be the default.'),
      '#default_value' => isset($settings['weight']) ? $settings['weight'] : 0,
    );
    
    $form['clio_analyze_config'][$viz]['parameters'] = array(
      '#type' => 'fieldset',
      '#title' => t('Extra parameters'),
      '#description' => t('Extra parameters to include in the query to the API.'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    $parameters = isset($settings['parameters']) ? $settings['parameters'] : array();
    // Add an empty key/value pair to the settings form.
    $parameters[] = array(
      'key' => NULL,
      'value' => NULL,
    );
    $index = 0;
    foreach ($parameters as $param) {
      $form['clio_analyze_config'][$viz]['parameters'][$index++] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        'key' => array(
          '#type' => 'textfield',
          '#title' => t('Key'),
          '#size' => 10,
          '#default_value' => $param['key'],
        ),
        'value' => array(
          '#type' => 'textfield',
          '#title' => t('Value'),
          '#size' => 10,
          '#default_value' => $param['value'],
        ),
      );
    }
  }
  return system_settings_form($form);
}


function clio_analyze_config_form_validate(&$form, &$form_state) {
  $visualizations = clio_analyze_visualizations();
  foreach ($visualizations as $viz) {
    $settings = $form_state['values']['clio_analyze_config'][$viz];
    if (!$settings['api']) {
      // Remove all settings for this visualization.
      $settings = array();
    }
    else if ($settings['parameters']) {
      foreach ($settings['parameters'] as $key => $value) {
        if (!$value['key'] || !$value['value']) {
          unset($settings['parameters'][$key]);
        }
      // TODO else validate (alphanum)
      }
    }
    $form_state['values']['clio_analyze_config'][$viz] = $settings;
  }
}


/*
 * Display a visualization.
 *
 * @param $viz
 *   The visualization identifier.
 * @param $query
 *   Array with visualization specific query parameters to send to the API.
 */
function clio_analyze_view($viz) {
  if (!in_array($viz, clio_analyze_visualizations())) {
    // Error.
  }
  $params = isset($_SESSION['clio']) ? $_SESSION['clio'] : array();
  $datasetid = isset($params['datasetid']) ? $params['datasetid'] : '';
  $yearmin   = isset($params['year']) ? $params['year']['min'] : '';
  $yearmax   = isset($params['year']) ? $params['year']['max'] : '';
  $startyear = isset($params['startyear']) ? $params['startyear'] : '';
  $endyear   = isset($params['endyear']) ? $params['endyear'] : '';
  $type      = isset($params['type']) && $params['type'][0] == 'historical' ? 'on' : '';
  $countrylist = isset($params['country']) ? implode(',', $params['country']) : '';

  $config = variable_get('clio_analyze_config', array());
  $settings = $config[$viz];
  $api    = isset($settings['api']) ? $settings['api'] : '';
  $height = isset($settings['height']) ? $settings['height'] : '500';
  $parameters = isset($settings['parameters']) ? $settings['parameters'] : array();
  $query = array();
  foreach ($parameters as $key => $value) {
    $query[$value['key']] = $value['value'];
  }

  $content = '';

  // First clear all status messages, leaving errors intact.
  drupal_get_messages('status');
  
  if (!($datasetid)) {
    drupal_set_message(t('Please select a dataset.'));
  }
  else if (!$api) {
    drupal_set_message(t('The visualization is not configured correctly.'), 'error');
  }
  else {
    $query = array_merge($query, 
      array(
        'hist' => $type,
        'handle' => $datasetid,
        'ctrlist' => $countrylist,
        'yearmin' => $yearmin,
        'yearmax' => $yearmax,
      )
    );
    $url = url($api, array('query' => $query));
    $content = '<div id="external-site-container" height="100%">
    <iframe id="external-site" src="'. $url .'" scrolling="auto" frameBorder="0" height="' . $height . '" width="100%" />
      <h3>Your browser does not support iframes. <a href="'. $url . '" title="' . $url . '">Click here to view the page you selected</a>.</h3>
    </iframe>
    </div>';
  }
  
  $classes = array('collapsible', 'adjust-selection');
  if ($datasetid) {
    // Close the selector if a dataset was selected.
    $classes[] = 'collapsed';
  }
  $output = array (
    'vizualization' => array(
      '#type' => 'markup',
      '#markup' => $content,
    ),
    'select' => array(
      '#type' => 'fieldset', 
      '#title' => t('Adjust selection'),
      // #collapsible only works when called from drupal_get_form().
      // Therefore we set the collapse function directly.
      '#attributes' => array('class' => $classes),
      '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
      'form1' => drupal_get_form('clio_search_type_form'),
      'form2' => drupal_get_form('clio_search_select_form'),
    ),
  );
  if (CLIO_DEBUG && $content) {
    $output['debug'] = array(
      '#type' => 'markup',
      '#markup' => '<div>Debug data: '. $datasetid . ' / '. l('query', $api, array('query' => $query)) . '</div>',
    );
  }
  return $output;
}

